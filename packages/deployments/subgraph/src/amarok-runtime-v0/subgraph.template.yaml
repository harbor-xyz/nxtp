specVersion: 0.0.4
schema:
  file: ./src/amarok-runtime-v0/schema.graphql
dataSources:
  # CONNEXT events
  - kind: ethereum/contract
    name: Connext
    network: "{{network}}"
    source:
      address: "{{address}}"
      abi: Connext
      # prettier-ignore
      startBlock: {{startBlock}}
    mapping:
      kind: ethereum/events
      apiVersion: 0.0.6
      language: wasm/assemblyscript
      entities:
        - Asset
        - AssetBalance
        - Router
        - Transfer
      abis:
        - name: Connext
          file: ./src/amarok-runtime-v0/abis/Connext.json
      eventHandlers:
        # AssetAdded: key, canonicalId, domain, adoptedAsset, localAsset, caller
        - event: AssetAdded(indexed bytes32,indexed bytes32,indexed uint32,address,address,address)
          handler: handleAssetAdded
        # RelayerAdded: relayer, caller
        - event: RelayerAdded(address,address)
          handler: handleRelayerAdded
        # RelayerRemoved: relayer, caller
        - event: RelayerRemoved(address,address)
          handler: handleRelayerRemoved
        - event: SequencerAdded(address,address)
          handler: handleSequencerAdded
        - event: SequencerRemoved(address,address)
          handler: handleSequencerRemoved
        - event: RouterLiquidityAdded(indexed address,address,bytes32,uint256,address)
          handler: handleRouterLiquidityAdded
        - event: RouterLiquidityRemoved(indexed address,address,address,bytes32,uint256,address)
          handler: handleRouterLiquidityRemoved
        - event: XCalled(indexed bytes32,indexed uint256,indexed bytes32,(uint32,uint32,uint32,address,address,bool,bytes,uint256,address,uint256,uint256,uint256,bytes32),address,uint256,address,bytes)
          handler: handleXCalled
        - event: Executed(indexed bytes32,indexed address,indexed address,((uint32,uint32,uint32,address,address,bool,bytes,uint256,address,uint256,uint256,uint256,bytes32),address[],bytes[],address,bytes),address,uint256,address)
          handler: handleExecuted
          # Reconciled: transferId, origin, routers, asset, amount, caller
        - event: Reconciled(indexed bytes32,indexed uint32,indexed address,address[],uint256,address)
          handler: handleReconciled
          # StableSwapAdded: bytes32 canonicalId, bytes32 domain, address swapPool, address caller
        - event: StableSwapAdded(indexed bytes32,indexed bytes32,indexed uint32,address,address)
          handler: handleStableSwapAdded
        - event: RouterAdded(indexed address,address)
          handler: handleRouterAdded
        - event: RouterRemoved(indexed address,address)
          handler: handleRouterRemoved
        - event: RouterRecipientSet(indexed address,indexed address,indexed address)
          handler: handleRouterRecipientSet
        - event: RouterOwnerProposed(indexed address,indexed address,indexed address)
          handler: handleRouterOwnerProposed
        - event: RouterOwnerAccepted(indexed address,indexed address,indexed address)
          handler: handleRouterOwnerAccepted
        - event: MaxRoutersPerTransferUpdated(uint256,address)
          handler: handleMaxRoutersPerTransferUpdated
        - event: TransferRelayerFeesIncreased(indexed bytes32,uint256,address)
          handler: handleRelayerFeesIncreased
      file: ./src/amarok-runtime-v0/mapping/index.ts
  # SPOKE CONNECTOR events
  - kind: ethereum/contract
    name: SpokeConnector
    network: "{{network}}"
    source:
      address: "{{address}}"
      abi: SpokeConnector
      # prettier-ignore
      startBlock: {{startBlock}}
    mapping:
      kind: ethereum/events
      apiVersion: 0.0.6
      language: wasm/assemblyscript
      entities:
        - AggregateRoot
        - RootMessageSent
        - ConnectorMeta
        - DestinationMessage
      abis:
        - name: SpokeConnector
          file: ./src/amarok-runtime-v0/abis/SpokeConnector.json
      eventHandlers:
        - event: AggregateRootReceived(bytes32)
          handler: handleAggregateRootReceived
        - event: MessageSent(bytes,bytes,address)
          handler: handleMessageSent
        - event: NewConnector(indexed uint32,indexed uint32,address,address,address)
          handler: handleNewConnector
      file: ./src/amarok-runtime-v0/mapping/index.ts
  # MERKLE TREE MANAGER events
  - kind: ethereum/contract
    name: MerkleTreeManager
    network: "{{network}}"
    source:
      address: "{{address}}"
      abi: MerkleTreeManager
      # prettier-ignore
      startBlock: {{startBlock}}
    mapping:
      kind: ethereum/events
      apiVersion: 0.0.6
      language: wasm/assemblyscript
      entities:
        - OriginMessage
        - RootCount
      abis:
        - name: MerkleTreeManager
          file: ./src/amarok-runtime-v0/abis/MerkleTreeManager.json
      eventHandlers:
        - event: LeafInserted(bytes32,uint256,bytes32)
          handler: handleLeafInserted
      file: ./src/amarok-runtime-v0/mapping/index.ts
templates:
  # STABLE SWAP events
  - kind: ethereum/contract
    name: StableSwap
    network: "{{network}}"
    source:
      abi: StableSwap
    mapping:
      kind: ethereum/events
      apiVersion: 0.0.6
      language: wasm/assemblyscript
      entities:
        - StableSwap
        - StableSwapLiquidity
        - PooledToken
      abis:
        - name: StableSwap
          file: ./src/amarok-runtime-v0/abis/StableSwap.json
      eventHandlers:
        - event: AddLiquidity(indexed address,uint256[],uint256[],uint256,uint256)
          handler: handleAddLiquidity
        - event: Initialized(uint8)
          handler: handleInitialized
        - event: NewAdminFee(uint256)
          handler: handleNewAdminFee
        - event: NewSwapFee(uint256)
          handler: handleNewSwapFee
        - event: NewWithdrawFee(uint256)
          handler: handleNewWithdrawFee
        - event: Paused(address)
          handler: handlePaused
        - event: RampA(uint256,uint256,uint256,uint256)
          handler: handleRampA
        - event: RemoveLiquidity(indexed address,uint256[],uint256)
          handler: handleRemoveLiquidity
        - event: RemoveLiquidityImbalance(indexed address,uint256[],uint256[],uint256,uint256)
          handler: handleRemoveLiquidityImbalance
        - event: StopRampA(uint256,uint256)
          handler: handleStopRampA
        - event: SwapInitialized((uint256,uint256,uint256,uint256,uint256,uint256,address,address[],uint256[],uint256[],uint256[]),address)
          handler: handleSwapInitialized
        - event: TokenSwap(indexed address,uint256,uint256,uint128,uint128)
          handler: handleTokenSwap
        - event: Unpaused(address)
          handler: handleUnpaused
      file: ./src/amarok-runtime-v0/mapping/index.ts
