name: E2E Workflow for Connext

on:
  push:
    branches:
      - main
      - staging
      - prod
  pull_request:
  create:
    tag:
      - "v*"

jobs:
  build-and-test:
    if: github.ref != 'refs/heads/staging'
    runs-on: ubuntu-latest
    permissions:
      contents: read

    env:
      DATABASE_URL: postgres://postgres:qwerty@localhost:5432/connext?sslmode=disable

    # Service containers to run with `container-job`
    services:
      # Label used to access the service container
      postgres:
        # Docker Hub image
        image: postgres
        # Provide the password for postgres
        env:
          POSTGRES_PASSWORD: qwerty
        # Set health checks to wait until postgres has started
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          # maps tcp port 5432 on service container to the host
          - 5432:5432

    steps:
      - name: Checkout repository
        uses: actions/checkout@v2

      - name: Install Foundry
        uses: onbjerg/foundry-toolchain@v1
        with:
          version: nightly

      - name: Setup Node
        uses: actions/setup-node@v2
        with:
          node-version: "18"
          cache: "yarn"

      - name: Yarn install
        run: yarn install

      - name: Forge install
        run: yarn workspace @connext/nxtp-contracts forge:install

      - name: Yarn build
        run: yarn build

      - name: Install DBMate
        run: sudo curl -fsSL -o /usr/local/bin/dbmate https://github.com/amacneil/dbmate/releases/latest/download/dbmate-linux-amd64 && sudo chmod +x /usr/local/bin/dbmate

      - name: Migrate Database
        run: yarn workspace @connext/nxtp-adapters-database dbmate up

      - name: Yarn test
        run: yarn test:all

      - name: Yarn lint
        env:
          NODE_OPTIONS: "--max-old-space-size=8192"
        run: yarn lint:all

      - name: Publish
        if: ${{ startsWith(github.ref, 'refs/tags/v') }}
        env:
          YARN_NPM_AUTH_TOKEN: ${{ secrets.NPM_TOKEN }}
        run: |
          yarn workspace @connext/nxtp-utils npm publish --access public
          yarn workspace @connext/nxtp-contracts npm publish --access public
          yarn workspace @connext/nxtp-txservice npm publish --access public
          yarn workspace @connext/nxtp-adapters-subgraph npm publish --access public
          yarn workspace @connext/nxtp-adapters-cache npm publish --access public
          yarn workspace @connext/nxtp-sdk npm publish --access public

  build-and-push-router-publisher-image:
    if: github.ref == 'refs/heads/main' || github.ref == 'refs/heads/staging' || github.ref == 'refs/heads/prod'
    env:
      REGISTRY: ghcr.io
      IMAGE_NAME: connext/router-publisher
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write

    steps:
      - name: Checkout repository
        uses: actions/checkout@v2

      - name: Log in to the Container registry
        uses: docker/login-action@f054a8b539a109f9f41c372932f1ae047eff08c9
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Extract metadata (tags, labels) for Docker
        id: meta
        uses: docker/metadata-action@98669ae865ea3cffbcbaa878cf57c20bbf1c6c38
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
          tags: |
            type=sha,format=short
            type=semver,pattern={{raw}}

      - name: Build and push Docker image
        uses: docker/build-push-action@ad44023a93711e3deb337508980b4b5e9bcdc5dc
        with:
          context: .
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          file: docker/router/publisher/Dockerfile

    outputs:
      json: ${{ steps.meta.outputs.json }}

  build-and-push-router-subscriber-image:
    if: github.ref == 'refs/heads/main' || github.ref == 'refs/heads/staging' || github.ref == 'refs/heads/prod'
    env:
      REGISTRY: ghcr.io
      IMAGE_NAME: connext/router-subscriber
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write

    steps:
      - name: Checkout repository
        uses: actions/checkout@v2

      - name: Log in to the Container registry
        uses: docker/login-action@f054a8b539a109f9f41c372932f1ae047eff08c9
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Extract metadata (tags, labels) for Docker
        id: meta
        uses: docker/metadata-action@98669ae865ea3cffbcbaa878cf57c20bbf1c6c38
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
          tags: |
            type=sha,format=short
            type=semver,pattern={{raw}}

      - name: Build and push Docker image
        uses: docker/build-push-action@ad44023a93711e3deb337508980b4b5e9bcdc5dc
        with:
          context: .
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          file: docker/router/subscriber/Dockerfile

    outputs:
      json: ${{ steps.meta.outputs.json }}

  build-and-push-router-executor-image:
    if: github.ref == 'refs/heads/main' || github.ref == 'refs/heads/staging' || github.ref == 'refs/heads/prod'
    env:
      REGISTRY: ghcr.io
      IMAGE_NAME: connext/router-executor
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write

    steps:
      - name: Checkout repository
        uses: actions/checkout@v2

      - name: Log in to the Container registry
        uses: docker/login-action@f054a8b539a109f9f41c372932f1ae047eff08c9
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Extract metadata (tags, labels) for Docker
        id: meta
        uses: docker/metadata-action@98669ae865ea3cffbcbaa878cf57c20bbf1c6c38
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
          tags: |
            type=sha,format=short
            type=semver,pattern={{raw}}

      - name: Build and push Docker image
        uses: docker/build-push-action@ad44023a93711e3deb337508980b4b5e9bcdc5dc
        with:
          context: .
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          file: docker/router/executor/Dockerfile

    outputs:
      json: ${{ steps.meta.outputs.json }}

  build-and-push-sequencer-publisher-image:
    if: github.ref == 'refs/heads/main' || github.ref == 'refs/heads/staging' || github.ref == 'refs/heads/prod'
    env:
      REGISTRY: ghcr.io
      IMAGE_NAME: connext/sequencer-publisher
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write

    steps:
      - name: Checkout repository
        uses: actions/checkout@v2

      - name: Log in to the Container registry
        uses: docker/login-action@f054a8b539a109f9f41c372932f1ae047eff08c9
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Extract metadata (tags, labels) for Docker
        id: meta
        uses: docker/metadata-action@98669ae865ea3cffbcbaa878cf57c20bbf1c6c38
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
          tags: |
            type=sha,format=short
            type=semver,pattern={{raw}}

      - name: Build and push Docker image
        uses: docker/build-push-action@ad44023a93711e3deb337508980b4b5e9bcdc5dc
        with:
          context: .
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          file: docker/sequencer/publisher/Dockerfile

    outputs:
      json: ${{ steps.meta.outputs.json }}

  build-and-push-sequencer-subscriber-image:
    if: github.ref == 'refs/heads/main' || github.ref == 'refs/heads/staging' || github.ref == 'refs/heads/prod'
    env:
      REGISTRY: ghcr.io
      IMAGE_NAME: connext/sequencer-subscriber
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write

    steps:
      - name: Checkout repository
        uses: actions/checkout@v2

      - name: Log in to the Container registry
        uses: docker/login-action@f054a8b539a109f9f41c372932f1ae047eff08c9
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Extract metadata (tags, labels) for Docker
        id: meta
        uses: docker/metadata-action@98669ae865ea3cffbcbaa878cf57c20bbf1c6c38
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
          tags: |
            type=sha,format=short
            type=semver,pattern={{raw}}

      - name: Build and push Docker image
        uses: docker/build-push-action@ad44023a93711e3deb337508980b4b5e9bcdc5dc
        with:
          context: .
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          file: docker/sequencer/subscriber/Dockerfile

    outputs:
      json: ${{ steps.meta.outputs.json }}

  build-and-push-cartographer-routers-image:
    if: github.ref == 'refs/heads/main' || github.ref == 'refs/heads/staging' || github.ref == 'refs/heads/prod'
    env:
      REGISTRY: ghcr.io
      IMAGE_NAME: connext/cartographer-routers
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write

    steps:
      - name: Checkout repository
        uses: actions/checkout@v2

      - name: Log in to the Container registry
        uses: docker/login-action@f054a8b539a109f9f41c372932f1ae047eff08c9
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Extract metadata (tags, labels) for Docker
        id: meta
        uses: docker/metadata-action@98669ae865ea3cffbcbaa878cf57c20bbf1c6c38
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
          tags: |
            type=sha,format=short
            type=semver,pattern={{raw}}

      - name: Build and push Docker image
        uses: docker/build-push-action@ad44023a93711e3deb337508980b4b5e9bcdc5dc
        with:
          context: .
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          file: docker/cartographer/routers/Dockerfile

    outputs:
      json: ${{ steps.meta.outputs.json }}

  build-and-push-cartographer-transfers-image:
    if: github.ref == 'refs/heads/main' || github.ref == 'refs/heads/staging' || github.ref == 'refs/heads/prod'
    env:
      REGISTRY: ghcr.io
      IMAGE_NAME: connext/cartographer-transfers
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write

    steps:
      - name: Checkout repository
        uses: actions/checkout@v2

      - name: Log in to the Container registry
        uses: docker/login-action@f054a8b539a109f9f41c372932f1ae047eff08c9
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Extract metadata (tags, labels) for Docker
        id: meta
        uses: docker/metadata-action@98669ae865ea3cffbcbaa878cf57c20bbf1c6c38
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
          tags: |
            type=sha,format=short
            type=semver,pattern={{raw}}

      - name: Build and push Docker image
        uses: docker/build-push-action@ad44023a93711e3deb337508980b4b5e9bcdc5dc
        with:
          context: .
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          file: docker/cartographer/transfers/Dockerfile

    outputs:
      json: ${{ steps.meta.outputs.json }}

  build-and-push-cartographer-messages-image:
    if: github.ref == 'refs/heads/main' || github.ref == 'refs/heads/staging' || github.ref == 'refs/heads/prod'
    env:
      REGISTRY: ghcr.io
      IMAGE_NAME: connext/cartographer-messages
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write

    steps:
      - name: Checkout repository
        uses: actions/checkout@v2

      - name: Log in to the Container registry
        uses: docker/login-action@f054a8b539a109f9f41c372932f1ae047eff08c9
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Extract metadata (tags, labels) for Docker
        id: meta
        uses: docker/metadata-action@98669ae865ea3cffbcbaa878cf57c20bbf1c6c38
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
          tags: |
            type=sha,format=short
            type=semver,pattern={{raw}}

      - name: Build and push Docker image
        uses: docker/build-push-action@ad44023a93711e3deb337508980b4b5e9bcdc5dc
        with:
          context: .
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          file: docker/cartographer/messages/Dockerfile

    outputs:
      json: ${{ steps.meta.outputs.json }}

  build-and-push-cartographer-roots-image:
    if: github.ref == 'refs/heads/main' || github.ref == 'refs/heads/staging' || github.ref == 'refs/heads/prod'
    env:
      REGISTRY: ghcr.io
      IMAGE_NAME: connext/cartographer-roots
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write

    steps:
      - name: Checkout repository
        uses: actions/checkout@v2

      - name: Log in to the Container registry
        uses: docker/login-action@f054a8b539a109f9f41c372932f1ae047eff08c9
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Extract metadata (tags, labels) for Docker
        id: meta
        uses: docker/metadata-action@98669ae865ea3cffbcbaa878cf57c20bbf1c6c38
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
          tags: |
            type=sha,format=short
            type=semver,pattern={{raw}}

      - name: Build and push Docker image
        uses: docker/build-push-action@ad44023a93711e3deb337508980b4b5e9bcdc5dc
        with:
          context: .
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          file: docker/cartographer/roots/Dockerfile

    outputs:
      json: ${{ steps.meta.outputs.json }}

  build-and-push-lighthouse-prover-image:
    if: github.ref == 'refs/heads/main' || github.ref == 'refs/heads/staging' || github.ref == 'refs/heads/prod'
    env:
      REGISTRY: ghcr.io
      IMAGE_NAME: connext/lighthouse-prover
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write

    steps:
      - name: Checkout repository
        uses: actions/checkout@v2

      - name: Log in to the Container registry
        uses: docker/login-action@f054a8b539a109f9f41c372932f1ae047eff08c9
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Extract metadata (tags, labels) for Docker
        id: meta
        uses: docker/metadata-action@98669ae865ea3cffbcbaa878cf57c20bbf1c6c38
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
          tags: |
            type=sha,format=short
            type=semver,pattern={{raw}}

      - name: Build and push Docker image
        uses: docker/build-push-action@ad44023a93711e3deb337508980b4b5e9bcdc5dc
        with:
          context: .
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          file: docker/lighthouse/prover/Dockerfile

    outputs:
      json: ${{ steps.meta.outputs.json }}

  build-and-push-lighthouse-process-from-root-image:
    if: github.ref == 'refs/heads/main' || github.ref == 'refs/heads/staging' || github.ref == 'refs/heads/prod'
    env:
      REGISTRY: ghcr.io
      IMAGE_NAME: connext/lighthouse-process-from-root
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write

    steps:
      - name: Checkout repository
        uses: actions/checkout@v2

      - name: Log in to the Container registry
        uses: docker/login-action@f054a8b539a109f9f41c372932f1ae047eff08c9
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Extract metadata (tags, labels) for Docker
        id: meta
        uses: docker/metadata-action@98669ae865ea3cffbcbaa878cf57c20bbf1c6c38
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
          tags: |
            type=sha,format=short
            type=semver,pattern={{raw}}

      - name: Build and push Docker image
        uses: docker/build-push-action@ad44023a93711e3deb337508980b4b5e9bcdc5dc
        with:
          context: .
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          file: docker/lighthouse/processFromRoot/Dockerfile

    outputs:
      json: ${{ steps.meta.outputs.json }}

  build-and-push-lighthouse-propagate-image:
    if: github.ref == 'refs/heads/main' || github.ref == 'refs/heads/staging' || github.ref == 'refs/heads/prod'
    env:
      REGISTRY: ghcr.io
      IMAGE_NAME: connext/lighthouse-propagate
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write

    steps:
      - name: Checkout repository
        uses: actions/checkout@v2

      - name: Log in to the Container registry
        uses: docker/login-action@f054a8b539a109f9f41c372932f1ae047eff08c9
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Extract metadata (tags, labels) for Docker
        id: meta
        uses: docker/metadata-action@98669ae865ea3cffbcbaa878cf57c20bbf1c6c38
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
          tags: |
            type=sha,format=short
            type=semver,pattern={{raw}}

      - name: Build and push Docker image
        uses: docker/build-push-action@ad44023a93711e3deb337508980b4b5e9bcdc5dc
        with:
          context: .
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          file: docker/lighthouse/propagate/Dockerfile

    outputs:
      json: ${{ steps.meta.outputs.json }}

  build-and-push-relayer-image:
    if: github.ref == 'refs/heads/main' || github.ref == 'refs/heads/staging' || github.ref == 'refs/heads/prod'
    env:
      REGISTRY: ghcr.io
      IMAGE_NAME: connext/relayer
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write

    steps:
      - name: Checkout repository
        uses: actions/checkout@v2

      - name: Log in to the Container registry
        uses: docker/login-action@f054a8b539a109f9f41c372932f1ae047eff08c9
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Extract metadata (tags, labels) for Docker
        id: meta
        uses: docker/metadata-action@98669ae865ea3cffbcbaa878cf57c20bbf1c6c38
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
          tags: |
            type=sha,format=short
            type=semver,pattern={{raw}}

      - name: Build and push Docker image
        uses: docker/build-push-action@ad44023a93711e3deb337508980b4b5e9bcdc5dc
        with:
          context: .
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          file: docker/relayer/Dockerfile

    outputs:
      json: ${{ steps.meta.outputs.json }}

  smoke-tests:
    runs-on: ubuntu-latest
    needs:
      [
        build-and-push-router-publisher-image,
        build-and-push-router-subscriber-image,
        build-and-push-router-executor-image,
        build-and-push-sequencer-publisher-image,
        build-and-push-sequencer-subscriber-image,
        build-and-push-cartographer-routers-image,
        build-and-push-cartographer-transfers-image,
        build-and-push-cartographer-messages-image,
        build-and-push-cartographer-roots-image,
        build-and-push-lighthouse-prover-image,
        build-and-push-lighthouse-process-from-root-image,
        build-and-push-lighthouse-propagate-image,
        build-and-push-relayer-image,
      ]
    env:
      ROUTER_PUBLISHER_IMAGE: ${{ fromJSON(needs.build-and-push-router-publisher-image.outputs.json).tags[0] }}
      ROUTER_SUBSCRIBER_IMAGE: ${{ fromJSON(needs.build-and-push-router-subscriber-image.outputs.json).tags[0] }}
      ROUTER_EXECUTOR_IMAGE: ${{fromJSON(needs.build-and-push-router-executor-image.outputs.json).tags[0]}}
      SEQUENCER_PUBLISHER_IMAGE: ${{ fromJSON(needs.build-and-push-sequencer-publisher-image.outputs.json).tags[0] }}
      SEQUENCER_SUBSCRIBER_IMAGE: ${{ fromJSON(needs.build-and-push-sequencer-subscriber-image.outputs.json).tags[0] }}
      CARTOGRAPHER_TRANSFERS_IMAGE: ${{fromJSON(needs.build-and-push-cartographer-transfers-image.outputs.json).tags[0]}}
      CARTOGRAPHER_ROUTERS_IMAGE: ${{fromJSON(needs.build-and-push-cartographer-routers-image.outputs.json).tags[0]}}
      CARTOGRAPHER_MESSAGES_IMAGE: ${{fromJSON(needs.build-and-push-cartographer-messages-image.outputs.json).tags[0]}}
      CARTOGRAPHER_ROOTS_IMAGE: ${{fromJSON(needs.build-and-push-cartographer-roots-image.outputs.json).tags[0]}}
      LIGHTHOUSE_PROVER_IMAGE: ${{fromJSON(needs.build-and-push-lighthouse-prover-image.outputs.json).tags[0]}}
      LIGHTHOUSE_PROCESS_FROM_ROOT_IMAGE: ${{fromJSON(needs.build-and-push-lighthouse-process-from-root-image.outputs.json).tags[0]}}
      LIGHTHOUSE_PROPAGATE_IMAGE: ${{fromJSON(needs.build-and-push-lighthouse-propagate-image.outputs.json).tags[0]}}
      RELAYER_IMAGE: ${{ fromJSON(needs.build-and-push-relayer-image.outputs.json).tags[0] }}
      WEB3_SIGNER_PRIVATE_KEY_ROUTER: "0xc87509a1c067bbde78beb793e6fa76530b6382a4c0241e5e4a9ec0a0f44dc0d3"
      WEB3_SIGNER_PRIVATE_KEY_SEQUENCER: "0xae6ae8e5ccbfb04590405997ee2d52d2b330726137b875053c36d94e974d162f"
      WEB3_SIGNER_PRIVATE_KEY_RELAYER: "0x09ac2359ab897a5ffc47d7c67df32abbf9c006e00fa2ba36580e0cecc58834fe"
      MNEMONIC: "candy maple cake sugar pudding cream honey rich smooth crumble sweet treat"
    steps:
      - name: Checkout repository
        uses: actions/checkout@v2

      - name: run smoke tests
        run: |
          docker-compose -f docker-compose.services.yaml -f docker-compose.chains.yaml up -d
          bash docker/bin/wait-for-services.sh router-publisher
          bash docker/bin/wait-for-services.sh router-subscriber
          bash docker/bin/wait-for-services.sh sequencer-publisher
          bash docker/bin/wait-for-services.sh sequencer-subscriber

    outputs:
      router-publisher-tags: ${{ needs.build-and-push-router-publisher-image.outputs.json }}
      router-subscriber-tags: ${{ needs.build-and-push-router-subscriber-image.outputs.json }}
      router-executor-tags: ${{ needs.build-and-push-router-executor-image.outputs.json }}
      sequencer-publisher-tags: ${{ needs.build-and-push-sequencer-publisher-image.outputs.json }}
      sequencer-subscriber-tags: ${{ needs.build-and-push-sequencer-subscriber-image.outputs.json }}
      cartographer-routers-tags: ${{ needs.build-and-push-cartographer-routers-image.outputs.json }}
      cartographer-transfers-tags: ${{ needs.build-and-push-cartographer-transfers-image.outputs.json }}
      cartographer-messages-tags: ${{ needs.build-and-push-cartographer-messages-image.outputs.json }}
      cartographer-roots-tags: ${{ needs.build-and-push-cartographer-roots-image.outputs.json }}
      lighthouse-prover-tags: ${{ needs.build-and-push-lighthouse-prover-image.outputs.json }}
      lighthouse-process-from-root-tags: ${{ needs.build-and-push-lighthouse-process-from-root-image.outputs.json }}
      lighthouse-propagate-tags: ${{ needs.build-and-push-lighthouse-propagate-image.outputs.json }}
      relayer-tags: ${{ needs.build-and-push-relayer-image.outputs.json }}

  e2e-tests:
    if: github.ref != 'refs/heads/staging'
    runs-on: ubuntu-latest
    needs:
      [
        build-and-test,
        build-and-push-router-publisher-image,
        build-and-push-router-subscriber-image,
        build-and-push-router-executor-image,
        build-and-push-sequencer-publisher-image,
        build-and-push-sequencer-subscriber-image,
        build-and-push-cartographer-routers-image,
        build-and-push-cartographer-transfers-image,
        build-and-push-cartographer-messages-image,
        build-and-push-cartographer-roots-image,
        build-and-push-lighthouse-prover-image,
        build-and-push-lighthouse-process-from-root-image,
        build-and-push-lighthouse-propagate-image,
        build-and-push-relayer-image,
      ]
    env:
      ROUTER_PUBLISHER_IMAGE: ${{ fromJSON(needs.build-and-push-router-publisher-image.outputs.json).tags[0] }}
      ROUTER_SUBSCRIBER_IMAGE: ${{ fromJSON(needs.build-and-push-router-subscriber-image.outputs.json).tags[0] }}
      ROUTER_EXECUTOR_IMAGE: ${{ fromJSON(needs.build-and-push-router-executor-image.outputs.json).tags[0] }}
      SEQUENCER_PUBLISHER_IMAGE: ${{ fromJSON(needs.build-and-push-sequencer-publisher-image.outputs.json).tags[0] }}
      SEQUENCER_SUBSCRIBER_IMAGE: ${{ fromJSON(needs.build-and-push-sequencer-subscriber-image.outputs.json).tags[0] }}
      CARTOGRAPHER_TRANSFERS_IMAGE: ${{fromJSON(needs.build-and-push-cartographer-transfers-image.outputs.json).tags[0]}}
      CARTOGRAPHER_ROUTERS_IMAGE: ${{fromJSON(needs.build-and-push-cartographer-routers-image.outputs.json).tags[0]}}
      CARTOGRAPHER_MESSAGES_IMAGE: ${{fromJSON(needs.build-and-push-cartographer-messages-image.outputs.json).tags[0]}}
      CARTOGRAPHER_ROOTS_IMAGE: ${{fromJSON(needs.build-and-push-cartographer-roots-image.outputs.json).tags[0]}}
      LIGHTHOUSE_PROVER_IMAGE: ${{fromJSON(needs.build-and-push-lighthouse-prover-image.outputs.json).tags[0]}}
      LIGHTHOUSE_PROCESS_FROM_ROOT_IMAGE: ${{fromJSON(needs.build-and-push-lighthouse-process-from-root-image.outputs.json).tags[0]}}
      LIGHTHOUSE_PROPAGATE_IMAGE: ${{fromJSON(needs.build-and-push-lighthouse-propagate-image.outputs.json).tags[0]}}
      RELAYER_IMAGE: ${{ fromJSON(needs.build-and-push-relayer-image.outputs.json).tags[0] }}
      WEB3_SIGNER_PRIVATE_KEY_ROUTER: "0xc87509a1c067bbde78beb793e6fa76530b6382a4c0241e5e4a9ec0a0f44dc0d3"
      WEB3_SIGNER_PRIVATE_KEY_SEQUENCER: "0xae6ae8e5ccbfb04590405997ee2d52d2b330726137b875053c36d94e974d162f"
      MNEMONIC: "candy maple cake sugar pudding cream honey rich smooth crumble sweet treat"
      GRAPH_1337_ENDPOINT: "http://localhost:8010/subgraphs/name/connext/nxtp"
      GRAPH_1338_ENDPOINT: "http://localhost:9010/subgraphs/name/connext/nxtp"

    steps:
      - name: Checkout repository
        uses: actions/checkout@v2

      - name: Setup Node
        uses: actions/setup-node@v2
        with:
          node-version: "18"

      - name: Yarn install
        run: yarn install

      - name: Yarn build
        run: yarn build

      # TODO ADD THIS BACK IN
      # - name: Integration Tests
      # run: yarn test:integration

    outputs:
      router-publisher-tags: ${{ needs.build-and-push-router-publisher-image.outputs.json }}
      router-subscriber-tags: ${{ needs.build-and-push-router-subscriber-image.outputs.json }}
      router-executor-tags: ${{ needs.build-and-push-router-executor-image.outputs.json }}
      sequencer-publisher-tags: ${{ needs.build-and-push-sequencer-publisher-image.outputs.json }}
      sequencer-subscriber-tags: ${{ needs.build-and-push-sequencer-subscriber-image.outputs.json }}
      cartographer-routers-tags: ${{ needs.build-and-push-cartographer-routers-image.outputs.json }}
      cartographer-transfers-tags: ${{ needs.build-and-push-cartographer-transfers-image.outputs.json }}
      cartographer-messages-tags: ${{ needs.build-and-push-cartographer-messages-image.outputs.json }}
      cartographer-roots-tags: ${{ needs.build-and-push-cartographer-roots-image.outputs.json }}
      lighthouse-prover-tags: ${{ needs.build-and-push-lighthouse-prover-image.outputs.json }}
      lighthouse-process-from-root-tags: ${{ needs.build-and-push-lighthouse-process-from-root-image.outputs.json }}
      lighthouse-propagate-tags: ${{ needs.build-and-push-lighthouse-propagate-image.outputs.json }}
      relayer-tags: ${{ needs.build-and-push-relayer-image.outputs.json }}

  terraform-infra:
    if: github.ref == 'refs/heads/staging' || github.ref == 'refs/heads/prod'
    runs-on: ubuntu-latest
    needs: [smoke-tests]
    env:
      AWS_PROFILE: aws-deployer-connext
    permissions:
      contents: read
      packages: write

    steps:
      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v1
        with:
          terraform_version: 1.1.7

      - name: Checkout repository
        uses: actions/checkout@v2

      - name: Configure AWS Credentials
        uses: Fooji/create-aws-profile-action@v1
        with:
          profile: aws-deployer-connext
          region: us-east-1
          key: ${{ secrets.DEPLOYER_AWS_ACCESS_KEY_ID }}
          secret: ${{ secrets.DEPLOYER_AWS_SECRET_ACCESS_KEY }}

      - name: Terraform Init
        id: init
        working-directory: ./ops/infra
        run: terraform init

      - name: Terraform Deploy Infra
        id: apply
        working-directory: ./ops/infra
        run: |
          terraform apply -auto-approve

  terraform-services-backend-staging-testnet:
    needs: [smoke-tests, terraform-infra]
    env:
      AWS_PROFILE: aws-deployer-connext
      TF_VAR_full_image_name_cartographer_routers: ${{ fromJSON(needs.smoke-tests.outputs.cartographer-routers-tags).tags[0] }}
      TF_VAR_full_image_name_cartographer_transfers: ${{ fromJSON(needs.smoke-tests.outputs.cartographer-transfers-tags).tags[0] }}
      TF_VAR_full_image_name_cartographer_messages: ${{ fromJSON(needs.smoke-tests.outputs.cartographer-messages-tags).tags[0] }}
      TF_VAR_full_image_name_cartographer_roots: ${{ fromJSON(needs.smoke-tests.outputs.cartographer-roots-tags).tags[0] }}

    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write

    steps:
      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v1
        with:
          terraform_version: 1.1.7

      - name: Setup Sops
        uses: mdgreenwald/mozilla-sops-action@v1.2.0
        with:
          version: "3.7.2"

      - name: Checkout repository
        uses: actions/checkout@v2

      - name: Configure AWS Credentials
        uses: Fooji/create-aws-profile-action@v1
        with:
          profile: aws-deployer-connext
          region: us-east-1
          key: ${{ secrets.DEPLOYER_AWS_ACCESS_KEY_ID }}
          secret: ${{ secrets.DEPLOYER_AWS_SECRET_ACCESS_KEY }}

      - name: Decrypt Testnet Secrets
        id: decrypt
        run: sops -d ops/env/testnet/backend/secrets.staging.json > ops/testnet/staging/backend/tfvars.json

      - name: Terraform Init
        id: init
        working-directory: ./ops/testnet/staging/backend
        run: terraform init

      - name: Terraform Plan
        id: plan
        working-directory: ./ops/testnet/staging/backend
        run: |
          terraform plan -var-file=tfvars.json
        continue-on-error: true

      - name: Terraform Docker Image onto AWS
        if: github.ref == 'refs/heads/staging'
        id: apply
        working-directory: ./ops/testnet/staging/backend
        run: |
          terraform apply -var-file=tfvars.json -auto-approve

    outputs:
      cartographer-routers-tags: ${{ needs.smoke-tests.outputs.cartographer-routers-tags }}
      cartographer-transfers-tags: ${{ needs.smoke-tests.outputs.cartographer-transfers-tags }}
      cartographer-messages-tags: ${{ needs.smoke-tests.outputs.cartographer-messages-tags }}
      cartographer-roots-tags: ${{ needs.smoke-tests.outputs.cartographer-roots-tags }}

  terraform-services-core-staging-testnet:
    needs: [smoke-tests, terraform-infra]
    env:
      AWS_PROFILE: aws-deployer-connext
      TF_VAR_full_image_name_router_publisher: ${{ fromJSON(needs.smoke-tests.outputs.router-publisher-tags).tags[0] }}
      TF_VAR_full_image_name_router_subscriber: ${{ fromJSON(needs.smoke-tests.outputs.router-subscriber-tags).tags[0] }}
      TF_VAR_full_image_name_router_executor: ${{ fromJSON(needs.smoke-tests.outputs.router-executor-tags).tags[0] }}
      TF_VAR_full_image_name_sequencer_publisher: ${{ fromJSON(needs.smoke-tests.outputs.sequencer-publisher-tags).tags[0] }}
      TF_VAR_full_image_name_sequencer_subscriber: ${{ fromJSON(needs.smoke-tests.outputs.sequencer-subscriber-tags).tags[0] }}
      TF_VAR_full_image_name_lighthouse_prover: ${{ fromJSON(needs.smoke-tests.outputs.lighthouse-prover-tags).tags[0] }}
      TF_VAR_full_image_name_lighthouse_process_from_root: ${{ fromJSON(needs.smoke-tests.outputs.lighthouse-process-from-root-tags).tags[0] }}
      TF_VAR_full_image_name_lighthouse_propagate: ${{ fromJSON(needs.smoke-tests.outputs.lighthouse-propagate-tags).tags[0] }}
      TF_VAR_full_image_name_relayer: ${{ fromJSON(needs.smoke-tests.outputs.relayer-tags).tags[0] }}

    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write

    steps:
      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v1
        with:
          terraform_version: 1.1.7

      - name: Setup Sops
        uses: mdgreenwald/mozilla-sops-action@v1.2.0
        with:
          version: "3.7.2"

      - name: Checkout repository
        uses: actions/checkout@v2

      - name: Configure AWS Credentials
        uses: Fooji/create-aws-profile-action@v1
        with:
          profile: aws-deployer-connext
          region: us-east-1
          key: ${{ secrets.DEPLOYER_AWS_ACCESS_KEY_ID }}
          secret: ${{ secrets.DEPLOYER_AWS_SECRET_ACCESS_KEY }}

      - name: Decrypt Testnet Secrets
        id: decrypt
        run: sops -d ops/env/testnet/core/secrets.staging.json > ops/testnet/staging/core/tfvars.json

      - name: Terraform Init
        id: init
        working-directory: ./ops/testnet/staging/core
        run: terraform init

      - name: Terraform Plan
        id: plan
        working-directory: ./ops/testnet/staging/core
        run: |
          terraform plan -var-file=tfvars.json
        continue-on-error: true

      - name: Terraform Docker Image onto AWS
        if: github.ref == 'refs/heads/staging'
        id: apply
        working-directory: ./ops/testnet/staging/core
        run: |
          terraform apply -var-file=tfvars.json -auto-approve

    outputs:
      sequencer-publisher-tags: ${{ needs.smoke-tests.outputs.sequencer-publisher-tags }}
      sequencer-subscriber-tags: ${{ needs.smoke-tests.outputs.sequencer-subscriber-tags }}
      router-publisher-tags: ${{ needs.smoke-tests.outputs.router-publisher-tags }}
      router-subscriber-tags: ${{ needs.smoke-tests.outputs.router-subscriber-tags }}
      router-executor-tags: ${{ needs.smoke-tests.outputs.router-executor-tags }}
      lighthouse-prover-tags: ${{ needs.smoke-tests.outputs.lighthouse-prover-tags }}
      lighthouse-process-from-root-tags: ${{ needs.smoke-tests.outputs.lighthouse-process-from-root-tags }}
      lighthouse-propagate-tags: ${{ needs.smoke-tests.outputs.lighthouse-propagate-tags }}
      relayer-tags: ${{ needs.smoke-tests.outputs.relayer-tags }}

  terraform-services-core-prod-testnet:
    if: github.ref == 'refs/heads/prod'
    needs: [e2e-tests]
    env:
      AWS_PROFILE: aws-deployer-connext
      TF_VAR_full_image_name_router_publisher: ${{ fromJSON(needs.e2e-tests.outputs.router-publisher-tags).tags[0] }}
      TF_VAR_full_image_name_router_subscriber: ${{ fromJSON(needs.e2e-tests.outputs.router-subscriber-tags).tags[0] }}
      TF_VAR_full_image_name_router_executor: ${{ fromJSON(needs.e2e-tests.outputs.router-executor-tags).tags[0] }}
      TF_VAR_full_image_name_sequencer_publisher: ${{ fromJSON(needs.e2e-tests.outputs.sequencer-publisher-tags).tags[0] }}
      TF_VAR_full_image_name_sequencer_subscriber: ${{ fromJSON(needs.e2e-tests.outputs.sequencer-subscriber-tags).tags[0] }}
      TF_VAR_full_image_name_lighthouse_prover: ${{ fromJSON(needs.e2e-tests.outputs.lighthouse-prover-tags).tags[0] }}
      TF_VAR_full_image_name_lighthouse_process_from_root: ${{ fromJSON(needs.e2e-tests.outputs.lighthouse-process-from-root-tags).tags[0] }}
      TF_VAR_full_image_name_lighthouse_propagate: ${{ fromJSON(needs.e2e-tests.outputs.lighthouse-propagate-tags).tags[0] }}
      TF_VAR_full_image_name_relayer: ${{ fromJSON(needs.e2e-tests.outputs.relayer-tags).tags[0] }}

    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write
    steps:
      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v1
        with:
          terraform_version: 1.1.7

      - name: Setup Sops
        uses: mdgreenwald/mozilla-sops-action@v1.2.0
        with:
          version: "3.7.2"

      - name: Checkout repository
        uses: actions/checkout@v2

      - name: Configure AWS Credentials
        uses: Fooji/create-aws-profile-action@v1
        with:
          profile: aws-deployer-connext
          region: us-east-1
          key: ${{ secrets.DEPLOYER_AWS_ACCESS_KEY_ID }}
          secret: ${{ secrets.DEPLOYER_AWS_SECRET_ACCESS_KEY }}

      - name: Decrypt Testnet Production Secrets
        id: decrypt
        run: sops -d ops/env/testnet/core/secrets.prod.json > ops/testnet/prod/core/tfvars.json

      - name: Terraform Init
        id: init
        working-directory: ./ops/testnet/prod/core
        run: terraform init

      - name: Terraform Plan
        id: plan
        working-directory: ./ops/testnet/prod/core
        run: |
          terraform plan -var-file=tfvars.json
        continue-on-error: true

      - name: Terraform Docker Image onto AWS
        id: apply
        working-directory: ./ops/testnet/prod/core
        run: |
          terraform apply -var-file=tfvars.json -auto-approve

    outputs:
      sequencer-publisher-tags: ${{ needs.e2e-tests.outputs.sequencer-publisher-tags }}
      sequencer-subscriber-tags: ${{ needs.e2e-tests.outputs.sequencer-subscriber-tags }}
      router-publisher-tags: ${{ needs.e2e-tests.outputs.router-publisher-tags }}
      router-subscriber-tags: ${{ needs.e2e-tests.outputs.router-subscriber-tags }}
      router-executor-tags: ${{ needs.e2e-tests.outputs.router-executor-tags }}
      lighthouse-prover-tags: ${{ needs.e2e-tests.outputs.lighthouse-prover-tags }}
      lighthouse-process-from-root-tags: ${{ needs.e2e-tests.outputs.lighthouse-process-from-root-tags }}
      lighthouse-propagate-tags: ${{ needs.e2e-tests.outputs.lighthouse-propagate-tags }}
      relayer-tags: ${{ needs.e2e-tests.outputs.relayer-tags }}

  terraform-services-backend-prod-testnet:
    if: github.ref == 'refs/heads/prod'
    needs: [e2e-tests]
    env:
      AWS_PROFILE: aws-deployer-connext
      TF_VAR_full_image_name_cartographer_routers: ${{ fromJSON(needs.e2e-tests.outputs.cartographer-routers-tags).tags[0] }}
      TF_VAR_full_image_name_cartographer_transfers: ${{ fromJSON(needs.e2e-tests.outputs.cartographer-transfers-tags).tags[0] }}
      TF_VAR_full_image_name_cartographer_messages: ${{ fromJSON(needs.e2e-tests.outputs.cartographer-messages-tags).tags[0] }}
      TF_VAR_full_image_name_cartographer_roots: ${{ fromJSON(needs.e2e-tests.outputs.cartographer-roots-tags).tags[0] }}

    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write

    steps:
      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v1
        with:
          terraform_version: 1.1.7

      - name: Setup Sops
        uses: mdgreenwald/mozilla-sops-action@v1.2.0
        with:
          version: "3.7.2"

      - name: Checkout repository
        uses: actions/checkout@v2

      - name: Configure AWS Credentials
        uses: Fooji/create-aws-profile-action@v1
        with:
          profile: aws-deployer-connext
          region: us-east-1
          key: ${{ secrets.DEPLOYER_AWS_ACCESS_KEY_ID }}
          secret: ${{ secrets.DEPLOYER_AWS_SECRET_ACCESS_KEY }}

      - name: Decrypt Testnet Secrets
        id: decrypt
        run: sops -d ops/env/testnet/backend/secrets.prod.json > ops/testnet/prod/backend/tfvars.json

      - name: Terraform Init
        id: init
        working-directory: ./ops/testnet/prod/backend
        run: terraform init

      - name: Terraform Plan
        id: plan
        working-directory: ./ops/testnet/prod/backend
        run: |
          terraform plan -var-file=tfvars.json
        continue-on-error: true

      - name: Terraform Docker Image onto AWS
        id: apply
        working-directory: ./ops/testnet/prod/backend
        run: |
          terraform apply -var-file=tfvars.json -auto-approve

    outputs:
      sequencer-publisher-tags: ${{ needs.e2e-tests.outputs.sequencer-publisher-tags }}
      sequencer-subscriber-tags: ${{ needs.e2e-tests.outputs.sequencer-subscriber-tags }}
      router-publisher-tags: ${{ needs.e2e-tests.outputs.router-publisher-tags }}
      router-subscriber-tags: ${{ needs.e2e-tests.outputs.router-subscriber-tags }}
      router-executor-tags: ${{ needs.e2e-tests.outputs.router-executor-tags }}
      lighthouse-prover-tags: ${{ needs.e2e-tests.outputs.lighthouse-prover-tags }}
      lighthouse-process-from-root-tags: ${{ needs.e2e-tests.outputs.lighthouse-process-from-root-tags }}
      lighthouse-propagate-tags: ${{ needs.e2e-tests.outputs.lighthouse-propagate-tags }}
      cartographer-routers-tags: ${{ needs.e2e-tests.outputs.cartographer-routers-tags }}
      cartographer-transfers-tags: ${{ needs.e2e-tests.outputs.cartographer-transfers-tags }}
      cartographer-messages-tags: ${{ needs.e2e-tests.outputs.cartographer-messages-tags }}
      cartographer-roots-tags: ${{ needs.e2e-tests.outputs.cartographer-roots-tags }}
      relayer-tags: ${{ needs.e2e-tests.outputs.relayer-tags }}

  terraform-services-backend-prod-mainnet:
    if: github.ref == 'refs/heads/prod'
    needs: [terraform-services-core-prod-testnet, terraform-services-backend-prod-testnet]
    env:
      AWS_PROFILE: aws-deployer-connext
      TF_VAR_full_image_name_cartographer_routers: ${{ fromJSON(needs.terraform-services-backend-prod-testnet.outputs.cartographer-routers-tags).tags[0] }}
      TF_VAR_full_image_name_cartographer_transfers: ${{ fromJSON(needs.terraform-services-backend-prod-testnet.outputs.cartographer-transfers-tags).tags[0] }}
      TF_VAR_full_image_name_cartographer_messages: ${{ fromJSON(needs.terraform-services-backend-prod-testnet.outputs.cartographer-messages-tags).tags[0] }}
      TF_VAR_full_image_name_cartographer_roots: ${{ fromJSON(needs.terraform-services-backend-prod-testnet.outputs.cartographer-roots-tags).tags[0] }}

    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write

    steps:
      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v1
        with:
          terraform_version: 1.1.7

      - name: Setup Sops
        uses: mdgreenwald/mozilla-sops-action@v1.2.0
        with:
          version: "3.7.2"

      - name: Checkout repository
        uses: actions/checkout@v2

      - name: Configure AWS Credentials
        uses: Fooji/create-aws-profile-action@v1
        with:
          profile: aws-deployer-connext
          region: us-east-1
          key: ${{ secrets.DEPLOYER_AWS_ACCESS_KEY_ID }}
          secret: ${{ secrets.DEPLOYER_AWS_SECRET_ACCESS_KEY }}

      - name: Decrypt Testnet Secrets
        id: decrypt
        run: sops -d ops/env/mainnet/backend/secrets.prod.json > ops/mainnet/prod/backend/tfvars.json

      - name: Terraform Init
        id: init
        working-directory: ./ops/mainnet/prod/backend
        run: terraform init

      - name: Terraform Plan
        id: plan
        working-directory: ./ops/mainnet/prod/backend
        run: |
          terraform plan -var-file=tfvars.json
        continue-on-error: true

      - name: Terraform Docker Image onto AWS
        id: apply
        working-directory: ./ops/mainnet/prod/backend
        run: |
          terraform apply -var-file=tfvars.json -auto-approve

  terraform-services-core-prod-mainnet:
    if: github.ref == 'refs/heads/prod'
    needs: [terraform-services-core-prod-testnet, terraform-services-backend-prod-testnet]
    env:
      AWS_PROFILE: aws-deployer-connext
      TF_VAR_full_image_name_router_publisher: ${{ fromJSON(needs.terraform-services-backend-prod-testnet.outputs.router-publisher-tags).tags[0] }}
      TF_VAR_full_image_name_router_subscriber: ${{ fromJSON(needs.terraform-services-backend-prod-testnet.outputs.router-subscriber-tags).tags[0] }}
      TF_VAR_full_image_name_router_executor: ${{ fromJSON(needs.terraform-services-backend-prod-testnet.outputs.router-executor-tags).tags[0] }}
      TF_VAR_full_image_name_sequencer_publisher: ${{ fromJSON(needs.terraform-services-backend-prod-testnet.outputs.sequencer-publisher-tags).tags[0] }}
      TF_VAR_full_image_name_sequencer_subscriber: ${{ fromJSON(needs.terraform-services-backend-prod-testnet.outputs.sequencer-subscriber-tags).tags[0] }}
      TF_VAR_full_image_name_lighthouse_prover: ${{ fromJSON(needs.terraform-services-backend-prod-testnet.outputs.lighthouse-prover-tags).tags[0] }}
      TF_VAR_full_image_name_lighthouse_process_from_root: ${{ fromJSON(needs.terraform-services-backend-prod-testnet.outputs.lighthouse-process-from-root-tags).tags[0] }}
      TF_VAR_full_image_name_lighthouse_propagate: ${{ fromJSON(needs.terraform-services-backend-prod-testnet.outputs.lighthouse-propagate-tags).tags[0] }}
      TF_VAR_full_image_name_relayer: ${{ fromJSON(needs.terraform-services-backend-prod-testnet.outputs.relayer-tags).tags[0] }}

    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write
    steps:
      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v1
        with:
          terraform_version: 1.1.7

      - name: Setup Sops
        uses: mdgreenwald/mozilla-sops-action@v1.2.0
        with:
          version: "3.7.2"

      - name: Checkout repository
        uses: actions/checkout@v2

      - name: Configure AWS Credentials
        uses: Fooji/create-aws-profile-action@v1
        with:
          profile: aws-deployer-connext
          region: us-east-1
          key: ${{ secrets.DEPLOYER_AWS_ACCESS_KEY_ID }}
          secret: ${{ secrets.DEPLOYER_AWS_SECRET_ACCESS_KEY }}

      - name: Decrypt Testnet Production Secrets
        id: decrypt
        run: sops -d ops/env/mainnet/core/secrets.prod.json > ops/mainnet/prod/core/tfvars.json

      - name: Terraform Init
        id: init
        working-directory: ./ops/mainnet/prod/core
        run: terraform init

      - name: Terraform Plan
        id: plan
        working-directory: ./ops/mainnet/prod/core
        run: |
          terraform plan -var-file=tfvars.json
        continue-on-error: true

      - name: Terraform Docker Image onto AWS
        id: apply
        working-directory: ./ops/mainnet/prod/core
        run: |
          terraform apply -var-file=tfvars.json -auto-approve